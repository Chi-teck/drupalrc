#===============================================================================
# Drupal RC
#
# Project URL: https://github.com/Chi-teck/drupalrc
#===============================================================================

# shellcheck disable=SC2120
# shellcheck disable=SC2164
# shellcheck disable=SC2155

#-------------------------------------------------------------------------------
# Prints a path to Drupal root directory.
#-------------------------------------------------------------------------------
function droot {
  local DIR;

  if [[ -n $1 ]]; then
    DIR=$(readlink -f "$1")
  else
    DIR=$(pwd)
  fi

  while true; do
    if [[ $DIR == '/' ]]; then
      return 1;
    fi
    
    if _dversion "$DIR" > /dev/null; then
      echo "$DIR"
      return 0
    fi
    
    local DRUPAL_ROOT
    # Check if Drupal resides in a sibling directory.
    for SUB_DIR in www docroot web htdocs public public_html html; do
      DRUPAL_ROOT=$DIR/$SUB_DIR
      if _dversion "$DRUPAL_ROOT" > /dev/null; then
        echo "$DRUPAL_ROOT"
        return 0
      fi
    done

    DIR=$(dirname "$DIR")
  done
}

#-------------------------------------------------------------------------------
# Quick navigation between Drupal directories.
#-------------------------------------------------------------------------------
function dcd {

  if [[ $1 = "$HOME" || $1 = '-' ]]; then
    cd "$1"
    return $?
  fi

  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  # Navigate to Drupal root if no argument was provided.
  if [[ -z $1 ]]; then
    cd "$DRUPAL_ROOT"
    return $?
  fi

  # Target directory exists in the current location.
  if [[ -d "$1" ]]; then
    cd "$1"
    return $?
  fi

  local DRUPAL_VERSION
  DRUPAL_VERSION=$(_dversion "$DRUPAL_ROOT")

  if [[ $DRUPAL_VERSION -lt 8 ]]; then
    _derror "Drupal $DRUPAL_VERSION is not supported."
    return 1;
  fi

  # Quick search in predefined list of Drupal directories.
  for DIR in $(_dcd_dirs); do
    if [[ -d $DRUPAL_ROOT/$DIR/$1 ]]; then
      cd "$DRUPAL_ROOT/$DIR/$1"
      return $?
    fi
  done

  # Deep search.
  local DIR;
  local TARGET_DIRS="$DRUPAL_ROOT/modules $DRUPAL_ROOT/themes"
  # shellcheck disable=SC2086
  DIR=$(find \
    $TARGET_DIRS \
    -maxdepth 3 \
    -path "*js" -prune -o \
    -path "*css" -prune -o \
    -path "*tests" -prune -o \
    -path "*templates" -prune -o \
    -path "*config" -prune -o \
    -path "*src" -prune -o \
    -path "*.git" -prune -o \
    -name "$1.info.yml"\
    -printf '%h\n')

  if [[ -n $DIR ]]; then
    cd "$DIR"
    return $?
  fi

  _derror "No such directory $1."
  return 1
}

#-------------------------------------------------------------------------------
# Downloads Drupal projects.
#-------------------------------------------------------------------------------
function dl {

  if [[ -z $1 ]]; then
    _derror 'Missing project name.'
    return 1;
  fi

  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local DRUPAL_VERSION=$(_dversion "$DRUPAL_ROOT")
  if [[ $DRUPAL_VERSION -lt 8 ]]; then
    _derror "Drupal $DRUPAL_VERSION is not supported."
    return 1;
  fi

  local PROJECT_ROOT
  if ! PROJECT_ROOT=$(_dproject "$DRUPAL_ROOT"); then
    _derror "Could not find composer.json file."
    return 1
  fi
  local PROJECTS=$(echo "$@" | sed 's/\</drupal\//g')
  echo 'Starting composer, this may take a while...'
  # shellcheck disable=SC2086
  composer require -d "$PROJECT_ROOT" $PROJECTS
}

#-------------------------------------------------------------------------------
# Rebuilds Drupal caches.
#-------------------------------------------------------------------------------
function dcr {
  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local DRUPAL_VERSION=$(_dversion "$DRUPAL_ROOT")
  if [[ $DRUPAL_VERSION -lt 8 ]]; then
    _derror "Drupal $DRUPAL_VERSION is not supported."
    return 1;
  fi

  drush cache-rebuild
}

#-------------------------------------------------------------------------------
# Opens Drupal configuration files in editor.
#-------------------------------------------------------------------------------
function dconf {
  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local FILE=$DRUPAL_ROOT/sites/default/${1-settings.php}
  if [[ ! -f $FILE ]]; then
    local PROJECT_ROOT
    if ! PROJECT_ROOT=$(_dproject "$DRUPAL_ROOT"); then
      _derror "Could not locate $1 file."
      return 1
    fi
    FILE=$PROJECT_ROOT/$1
    if [[ ! -f $FILE ]]; then
      _derror "Could not locate $1 file."
      return 1
    fi
  fi
  ${VISUAL-${EDITOR-vi}} "$FILE"
  return $?
}

#-------------------------------------------------------------------------------
# Executes scripts from vendor/bin directory.
#-------------------------------------------------------------------------------
function dbin {
  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  elif [[ -z $1 ]]; then
    _derror 'Target file was not specified.'
    return 1;
  else
    local BIN_DIR
    if ! BIN_DIR=$(_dbin "$DRUPAL_ROOT"); then
      _derror 'bin directory was not found.'
      return 1;
    fi
    local FILE=$BIN_DIR/$1
    if [[ ! -f $FILE ]]; then
      _derror 'No such file.'
      return 1;
    fi
    $FILE "${@:2}"
    return $?
  fi
}

#-------------------------------------------------------------------------------
# Executes Drush.
#-------------------------------------------------------------------------------
function drush {
  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local DRUPAL_VERSION=$(_dversion "$DRUPAL_ROOT")
  if [[ DRUPAL_VERSION -ge 8 ]]; then
    local FILE=$(_dbin "$DRUPAL_ROOT")/drush
    if [[ -f $FILE ]]; then
      $FILE "$@"
      return $?
    else
      _derror 'Drush is not installed on this site.'
      return 1;
    fi
  fi

  # Run global Drush for older Drupal versions.
  command drush "$@"
  return $?
}

#-------------------------------------------------------------------------------
# Executes PHP code sniffer using Drupal standards.
#-------------------------------------------------------------------------------
function drupalcs {
  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local PHPCS=$(_dbin "$DRUPAL_ROOT")/phpcs
  if [[ ! -f $PHPCS ]]; then
    _derror 'PHP code sniffer is not installed.'
    return 1
  fi

  local STANDARD
  if [[ -f phpcs.xml ]]; then
    STANDARD=phpcs.xml
  else
    STANDARD=Drupal,DrupalPractice
  fi

  # Drupal coding standards needs to be installed globbaly.
  $PHPCS --colors -sp --standard=$STANDARD "$@"
  return $?
}

#-------------------------------------------------------------------------------
# Runs PHPCBF tool.
#-------------------------------------------------------------------------------
alias d-cbf="d-phpcbf"
function d-phpcbf {
  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local PHPCBF=$(_dbin "$DRUPAL_ROOT")/phpcbf
  if [[ ! -f $PHPCBF ]]; then
    _derror 'PHPCBF is not installed.'
    return 1
  fi

  local STANDARD
  if [[ -f phpcs.xml ]]; then
    STANDARD=phpcs.xml
  else
    STANDARD=Drupal,DrupalPractice
  fi

  $PHPCBF --colors -sp --standard=$STANDARD "$@"
}

#-------------------------------------------------------------------------------
# Runs PHPUnit tests.
#-------------------------------------------------------------------------------
function dunit {

  if [[ $# -eq 0 ]]; then
    _derror 'Missing path.'
    return 1;
  fi

  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local DRUPAL_VERSION=$(_dversion "$DRUPAL_ROOT")
  if [[ $DRUPAL_VERSION -lt 8 ]]; then
    _derror "Drupal $DRUPAL_VERSION is not supported."
    return 1;
  fi

  local FILE=$(_dbin "$DRUPAL_ROOT")/phpunit
  if [[ ! -f $FILE ]]; then
    _derror 'PHPUnit is not installed.'
    return 1
  fi

  sudo -uwww-data -E "$FILE" -c "$DRUPAL_ROOT"/core "$@"
}

#-------------------------------------------------------------------------------
# Runs PHPStan analyze.
#-------------------------------------------------------------------------------
alias d-stan="d-phpstan"
function d-phpstan {
  if [[ $# -eq 0 ]]; then
    _derror 'Missing path.'
    return 1;
  fi

  local DRUPAL_ROOT
  if ! DRUPAL_ROOT=$(droot); then
    _derror 'Drupal installation was not found.'
    return 1;
  fi

  local DRUPAL_VERSION=$(_dversion "$DRUPAL_ROOT")
  if [[ $DRUPAL_VERSION -lt 8 ]]; then
    _derror "Drupal $DRUPAL_VERSION is not supported."
    return 1;
  fi

  local PHPSTAN=$(_dbin "$DRUPAL_ROOT")/phpstan
  if [[ ! -f $PHPSTAN ]]; then
    _derror 'PHPStan is not installed.'
    return 1
  fi

  local CONFIGURATION
  if [[ -f phpstan.neon ]]; then
    CONFIGURATION="--configuration=phpstan.neon"
  else
    if [[ ! -f /tmp/drupalrc.phpstan.neon ]]; then
      echo "Executing curl --output /tmp/drupalrc.phpstan.neon https://git.drupalcode.org/project/gitlab_templates/-/raw/main/assets/phpstan.neon"
      curl --output /tmp/drupalrc.phpstan.neon https://git.drupalcode.org/project/gitlab_templates/-/raw/main/assets/phpstan.neon
    fi
    CONFIGURATION="--configuration=/tmp/drupalrc.phpstan.neon"
  fi

  "$PHPSTAN" analyze "$CONFIGURATION" "$@"
}

#-------------------------------------------------------------------------------
# Prints Drupal major version.
#
# @internal
#-------------------------------------------------------------------------------
function _dversion {
  if [[ -f $1/index.php && -f $1/core/lib/Drupal.php ]]; then
    grep -E 'const VERSION = ' "$1/core/lib/Drupal.php" | sed "s/\s*const VERSION = '//; s/\..*$//"
  elif [[ -f $1/index.php && -d $1/includes/database ]]; then
    echo 7
  elif [[ -f $1/index.php && -f $1/includes/database.inc ]]; then
    echo 6
  else
    return 1
  fi
}

#-------------------------------------------------------------------------------
# Prints path to project root directory.
#
# @param 1
#   Path to Drupal root directory.
#
# @internal
#-------------------------------------------------------------------------------
function _dproject {
  local PROJECT_ROOT=$1/..
  if [[ ! -f $PROJECT_ROOT/composer.json ]]; then
    PROJECT_ROOT=$1
    if [[ ! -f $PROJECT_ROOT/composer.json ]]; then
      return 1
    fi
  fi
  echo "$PROJECT_ROOT"
}

#-------------------------------------------------------------------------------
# Prints error message.
#
# @internal
#-------------------------------------------------------------------------------
function _derror {
  >&2 echo -e "\e[91m$*\e[0m"
}

#-------------------------------------------------------------------------------
# Prints common Drupal directories to navigate.
#
# @internal
#-------------------------------------------------------------------------------
function _dcd_dirs {
  echo '. sites sites/all all sites/default default modules themes modules/contrib modules/custom core/modules core/themes ..'
}

#-------------------------------------------------------------------------------
# Prints a path to bin directory.
#
# @param 1
#   Path to Drupal root directory.
#
# @internal
#-------------------------------------------------------------------------------
function _dbin {
  local PROJECT_ROOT
  if ! PROJECT_ROOT=$(_dproject "$1"); then
    return 1
  fi
  local BIN_DIR=$PROJECT_ROOT/vendor/bin
  if [[ ! -d $BIN_DIR ]]; then
    BIN_DIR=$PROJECT_ROOT/bin
    if [[ ! -d $BIN_DIR ]]; then
      return 1;
    fi
  fi
  echo "$BIN_DIR";
}
